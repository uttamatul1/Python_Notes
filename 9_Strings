a = [2,'r','6',3.5,6]
for i in a:
    if (type(i)!=int):
        a.remove(i)
print(a)

An object is hashable if it has a hash value which never changes during its lifetime (it needs a __hash__() method), and can be compared to other objects 
(it needs an __eq__() or __cmp__() method). Hashable objects which compare equal must have the same hash value.
Hashability makes an object usable as a dictionary key and a set member, because these data structures use the hash value internally.
All of Pythonâ€™s immutable built-in objects are hashable, while no mutable containers (such as lists or dictionaries) are. Objects which are instances of 
user-defined classes are hashable by default; they all compare unequal, and their hash value is their id().

Hashing is a concept in computer science which is used to create high performance, pseudo random access data structures where large amount of data is to be stored
and accessed quickly.
For example, if you have 10,000 phone numbers, and you want to store them in an array (which is a sequential data structure that stores data in contiguous memory 
locations, and provides random access), but you might not have the required amount of contiguous memory locations.
So, you can instead use an array of size 100, and use a hash function to map a set of values to same indices, and these values can be stored in a linked list. 
This provides a performance similar to an array.
Now, a hash function can be as simple as dividing the number with the size of the array and taking the remainder as the index.

list, set and dict are not hashable. Everything else is hashable.

str is a class which is immutable, iterable, hashable and in a sequence.

s2='1a2s3d4f'
s2=sum([int (e) for e in s2 if ord(e)>=49 and ord(e)<=57])  ###Digits unicodes are between 49 and 57###
print(s2)

The format() method formats the specified value(s) and insert them inside the string's placeholder.
The placeholder is defined using curly brackets: {}.
#named indexes:
txt1 = "My name is {fname}, I'm {age}".format(fname = "John", age = 36)
#numbered indexes:
txt2 = "My name is {0}, I'm {1}".format("John",36)
print(txt1)
print(txt2)

s1='My name is Anthony'
s1=s1.split(' ')
s2=[str (e) for e in s1] 
print(s2)

s1=['My', 'name', 'is', 'Anthony']
s1=' '.join(s1)
print(s1)

Slicing operator:- strobject[beg:end:step]
s1='My name is Anthony'
s1=s1[1:10:2]
print(s1)



