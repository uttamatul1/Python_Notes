List is a class.
Class is a group of variables and functions known as attributes. The attribues are accessed using objects of a class.
List is a iterable sequence.
It is mutable and growable.
It can store heterogeneous data. ### Can contain different types of data
List elements are indexed.
a = [] ### Empty list

l1 = [12,28,56]
for a in l1:
    print(a,end=' ')

l1=[10,20,30,40]
for x in l1:
    if x==20:
        del l1[1]
print(l1)

There are two ways to add elements to the list:
append(value) ### Value added in last
insert(index,value) ### Value added in between. If index > last index then value will store at index +1 only

Class is a group of variables and functions.
These variables and function are called Attributes.

a,b,c= l1 ### unpacking
l1 = [a,b,c] ### packing

Built in methods:-
len() - returns length of specific iterables
min() - returns min value elements
max() - returns max value elements
sum() - returns sum of elements
sorted() - returns a sorted list of elements

list() method can take at most one arguement.

list.append(x)
Add an item to the end of the list. Equivalent to a[len(a):] = [x].

list.extend(iterable)
Extend the list by appending all the items from the iterable. Equivalent to a[len(a):] = iterable.

list.insert(i, x)
Insert an item at a given position. The first argument is the index of the element before which to insert, so a.insert(0, x) inserts at the front of the list, and a.insert(len(a), x) is equivalent to a.append(x).

list.remove(x)
Remove the first item from the list whose value is equal to x. It raises a ValueError if there is no such item.

list.pop([i])
Remove the item at the given position in the list, and return it. If no index is specified, a.pop() removes and returns the last item in the list. It raises an IndexError if the list is empty or the index is outside the list range.

list.clear()
Remove all items from the list. Equivalent to del a[:].

list.index(x[, start[, end]])
Return zero-based index in the list of the first item whose value is equal to x. Raises a ValueError if there is no such item.

The optional arguments start and end are interpreted as in the slice notation and are used to limit the search to a particular subsequence of the list. The returned index is computed relative to the beginning of the full sequence rather than the start argument.

list.count(x)
Return the number of times x appears in the list.

list.sort(*, key=None, reverse=False)
Sort the items of the list in place (the arguments can be used for sort customization, see sorted() for their explanation).

list.reverse()
Reverse the elements of the list in place.

list.copy()
Return a shallow copy of the list. Equivalent to a[:].

All immutable things are hashable but not all hashable things are immutable.
Hashable is a feature of Python objects that tells if a object has a hash value or not.
If it has a hash value then it does not change during it's entire lifetime.
