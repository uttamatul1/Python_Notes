For loops only work on iterables.
Iterables are basically a group of elements.

for x in ('Atul'):
    print(x)

x = input("Enter a word: ")
count=0
for a in x:
    if x=='a':
        count+=1
print('Count= ',count)

while loop iterates a block of code till a specified condition is true.

for loop iterates a block of code number of times same as the number of elements in the iterables.
If iterates for the number of iterables from the first element to the last element.

Iterables in Python are objects that can be iterated over, meaning they contain a collection of elements that can be accessed one at a time. 
Iterators, on the other hand, are objects that can be iterated over as well, but they also have a method called __next__() that allows them to remember their 
state during iteration.
Iterators and iterables are related concepts, but they are not the same. 
An iterable is any object capable of returning its members one at a time, while an iterator is an object that has been produced from an iterable and maintains the 
iteration state.
In Python, built-in types like lists, tuples, dictionaries, and sets are iterable. You can iterate over these objects using for loops or built-in functions like 
map(), filter(), and zip().

x = input("Enter a String: ")   ### Need to check this code ###
for a in x:
    if a=="r":
        break
    print("Empty String")
else:
    print("All the characters are processed")

Alternatively we can say that an Iterable object is something that contains a countable amount of value.
We can transverse through all the values from the beginning to the end.
An iterator is an object which implements the iterator protocal which consists of methods __iter__() and __next__().

for loop is always applied on iterable object.

Various iterables:
range | list | tuple | str | bytes | bytearray | set | frozenset | dict

range - It is a class.
It is a immutable sequence.
Range can contain only int type value.
It contains sequence of integers with common difference (Arithmetic progression).
r = range(beg,end,step)
r = range(end) ### beginning value is considered zero
r = range(beg,end) ### step is taken by-default as one
range element is accessed via for loop.
for a in r1:
    print(r1)
