An iterator can be seen as a pointer to a container (set, dict etc).
The iterator is an abstraction which enables the programmer to access all the elements of a container
without any deeper knowledge of the data structure of this container object.
Iterator is implicitly available for loop.

Container is an which contains many other objects.

next method returns the element pointed by specified iterator object.
next method advances iterator object so that it can point to next element of the container object.

When next method is called for an iterator object which surpasses the last object of the container
object, it produces StopIteration exception.

Iterator object can only access elements in a sequence from first element to the last element.

next method is used to advance the Iterator object.

There is no previous method to transverse iterator object on the element in reverse direction.
Similarly you can not access the elements using iterator.

t1=(1,2,3,5,4)
it=iter(t1)
while True:
    print(next(it))

Iterator object can be obtained in two ways:
Using iter() method
Generator function

Generators are special kind of functions.
A generator is defined like a normal function but whenever it needs to generate a value it does
so with 'yield' keyword rather than return.
If the body of a def contains yield the function automatically becomes a generator function.


S.no          Parameters	           Generator	                                                        Iterator
1	          Implementation 	       Implemented using a function defined in the runtime.	            Implemented using a class in the code.
2	          Yield usage for coder	   Generator uses the ‘yield’ keyword	                            Iterator does not use any keyword
3	          Class variable	       Generator does not need a class in python.	                    Iterator implements its own class
4	          Globals and locals 	   Generator saves the states of the local variables	            Iterator also does not uses local variable
5             Yield usage for user	   Uses the yield keyword for the output.	                         Does not use the yield keyword anywhere in the code.
6             Efficiency 	           Generators  write fast and compact code	                         Iterator writes custom and long codes
7             Functions	               Generator use python functions	                                 Iterator,use the iter() and next() functions
8             Storage capacity	       Generator is not memory efficient	                             Iterator is memory-efficient
9	          Relative working	       Usage results in a concise code in any  relative function.	      Usage results in a relatively less concise code as compared 
                                                                                                        in the whole python code.
**************************************************************
def evengenerator(n):
    x=2
    while n:
        yield x
        x+=2
        n-=1
for e in evengenerator(10):
    print(e,end=' ')
*****************************************************************
def fib(n):
    a,b=0,1
    while n:
        yield a
        a,b=b,a+b
        n-=1
for e in fib(10):
    print(e,end=' ')
***********************************************************************
def fib():
    a,b=0,1
    while True:
        yield a
        a,b=b,a+b
it=fib()
fib_list=[]
while True:
    ans=input('Do you want to generate another element[y/n]')
    if ans=='y':
        x=next(it)
        print(x)
        fib_list.append(x)
    else:
        break
****************************************************************************
Python allows the use of return in generator.
The return statement in generator is equivalent to raise StopIteration.
****************************************************************************
map function returns a map object(iterable) of the results after applying
the given function to each item of a given iterable (list, tuple etc).
map=(function,iterable)
******************************************************************************
l1=[1,2,3,4]
def square(a):
    return a*a
l2=list(map(square,l1))
print(l2)
*************************************************************************************
reduce(function,iterable) function is defined in functools module.
Just like map function, arguement function is applied to all the elements of 
arguement iterable in reduce method.
map returns an iterable while returns an accumulated single value.

import functools
l1=[1,2,3,4]
def multiply(a,b):
    return a*b
r=functools.reduce(multiply,l1)
print(r)
*************************************************************************************
The filter method filters a given iterable with the help of a function that tests each element 
in the iterable to be true or not.
filter(function,iterable)
l1=[1,2,3,4,5,6,7,8,9]
def checkprime(n):
    print(n)
    for i in range(1,n):
        print(i)
        if n%i==0:
            return False
        else:    
            return True
filteredlist=filter(checkprime,l1)
# print(filteredlist)
for i in filteredlist:
    print(i)

